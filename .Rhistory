geom_bar(stat = "identity", position = "dodge") +
labs(title = "Scores by Gender and Subject",
x = "Subject",
y = "Score",
fill = "Gender") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_long <- pivot_longer(study, cols = c(math_score, writing_score, reading_score), names_to = "Subject", values_to = "Score")
# Create a bar plot
ggplot(data_long, aes(x = Subject, y = Score, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Scores by Gender and Subject",
x = "Subject",
y = "Score",
fill = "gender") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = gender, color = gender)) +
# Add multiple geom_boxplot layers for each score
geom_violin(aes(y = math_score), alpha = 0.5, scale_y_down = TRUE) +
geom_violin(aes(y = writing_score), alpha = 0.5, scale_y_down = TRUE, position = position_dodge(width = 0.75)) +
geom_violin(aes(y = reading_score), alpha = 0.5, scale_y_down = TRUE, position = position_dodge(width = 1.5)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
# Add multiple geom_boxplot layers for each score
geom_violin(aes(y = math_score), alpha = 0.5, scale_y_down = TRUE) +
geom_violin(aes(y = writing_score), alpha = 0.5, scale_y_down = TRUE, position = position_dodge(width = 0.75)) +
geom_violin(aes(y = reading_score), alpha = 0.5, scale_y_down = TRUE, position = position_dodge(width = 1.5)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
# Add boxplot layer for each score
geom_boxplot(aes(y = math_score), notch = TRUE, alpha = 0.5, showmeans = TRUE) +
geom_boxplot(aes(y = writing_score), notch = TRUE, alpha = 0.5, showmeans = TRUE, position = position_dodge(width = 0.75)) +
geom_boxplot(aes(y = reading_score), notch = TRUE, alpha = 0.5, showmeans = TRUE, position = position_dodge(width = 1.5)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
# Add scatter plot with jittering for each score
geom_point(aes(y = math_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = writing_score), position = position_jitter(width = 0.1), position = position_dodge(width = 0.75)) +
geom_point(aes(y = reading_score), position = position_jitter(width = 0.1), position = position_dodge(width = 1.5)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender (Scatter Plots)", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
# Add scatter plot with jittering for each score
geom_point(aes(y = math_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = writing_score), position = position_jitter(width = 0.1), position = position_dodge(width = 0.75)) +
geom_point(aes(y = reading_score), position = position_jitter(width = 0.1), position = position_dodge(width = 1.5)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender (Scatter Plots)", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
# Add scatter plot with jittering for each score
geom_point(aes(y = math_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = writing_score), position = position_jitter(width = 0.1)) +  # Removed duplicate position argument
geom_point(aes(y = reading_score), position = position_jitter(width = 0.1), position = position_dodge(width = 1.5)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender (Scatter Plots)", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
# Add scatter plot with jittering for each score
geom_point(aes(y = math_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = writing_score))
geom_point(aes(y = reading_score))
# Set labels and title
labs(title = "Comparison of Scores by Gender (Scatter Plots)", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = math_score, color = gender)) +
# Add scatter plot with jittering for each score
geom_point(aes(y = gender), position = position_jitter(width = 0.1)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender (Scatter Plots)", x = "Score", y = "Gender") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = math_score, fill = gender)) +
geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Math Score",y = "Frequency",title = "Which gender is better in Maths?")
ggplot(study, aes(x = math_score, y = count(gender)) + geom_point() +
facet_grid(. ~ gender)
ggplot(study, aes(x = math_score, y = count(gender)) + geom_point() +
facet_grid(. ~ gender))
data_count <- study %>% count(gender)
ggplot(study, aes(x = math_score, y = data_count ) + geom_point() +
facet_grid(. ~ gender))
data_count <- study %>% count(gender)
ggplot(data = study, mapping = aes(x = math_score, y = data_count,
colour = gender)) +
geom_point()
data_count <- study %>% count(gender)
ggplot(data = data_count, mapping = aes(x = math_score, y = n, color = gender)) +
geom_point()
data_count <- study %>% count(gender)
ggplot(data = study, mapping = aes(x = math_score, y = n, color = gender)) +
geom_point()
ggplot(data = study, mapping = aes(x = math_score, color = gender)) +
geom_point()
# Plot student scores in math by gender
ggplot(data = study, aes(x = gender, y = math_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Math Score") +
ggtitle("Math Scores by Gender")
ggplot(data = study, aes(x = gender)) +
geom_boxplot(aes(y = math_score, color = gender), position = position_dodge(width = 0.8)) +
geom_boxplot(aes(y = reading_score, color = gender), position = position_dodge(width = 0.4)) +
geom_boxplot(aes(y = writing_score, color = gender)) +
labs(x = "Gender", y = "Score", color = "Gender") +
ggtitle("Scores by Gender") +
facet_wrap(~ variable, scales = "free_y", nrow = 1) +
theme(legend.position = "none")
# Create scatter plot with jittering for each score
ggplot(study, aes(x = gender, color = gender)) +
geom_point(aes(y = math_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = writing_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = reading_score), position = position_jitter(width = 0.1)) +
# Set labels and title
labs(title = "Comparison of Scores by Gender (Scatter Plots)", x = "Gender", y = "Score") +
# Theme adjustments
theme_classic() +
theme(legend.position = "bottom")
ggplot(study, aes(x = gender, color = gender)) +
geom_point(aes(y = math_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = writing_score), position = position_jitter(width = 0.1)) +
geom_point(aes(y = reading_score), position = position_jitter(width = 0.1)) +
labs(title = "Comparison of Scores by Gender (Scatter Plots)", y = "Score") +
facet_wrap(~ variable, scales = "free_y") +
theme_minimal()
# Plot student scores in math by gender
ggplot(data = study, aes(x = gender, y = math_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Math Score") +
ggtitle("Math Scores by Gender")
# Plot student scores in math by gender
ggplot(data = study, aes(x = gender, y = math_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Math Score") +
ggtitle("Math Scores by Gender")
ggplot(data = study, aes(x = gender, y = writing_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Writing Score") +
ggtitle("Math Scores by Gender")
ggplot(data = study, aes(x = gender, y = reading_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Reading Score") +
ggtitle("Math Scores by Gender")
# Plot student scores in math by gender
ggplot(data = study, aes(x = gender, y = math_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Math Score") +
ggtitle("Math Scores by Gender")
ggplot(data = study, aes(x = gender, y = writing_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Writing Score") +
ggtitle("Writing Scores by Gender")
ggplot(data = study, aes(x = gender, y = reading_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Reading Score") +
ggtitle("Reading Scores by Gender")
library(dplyr)
study <- study %>% mutate(average_score = round((math_score + writing_score + reading_score) / 3))
library(dplyr)
data <- study %>% mutate(average_score = round((math_score + writing_score + reading_score) / 3))
data <- study %>% mutate(average_score = round((math_score + writing_score + reading_score) / 3))
View(study)
detach("package:dplyr", unload = TRUE)
library(dplyr)
t.test(study$average_score ~ study$gender, var.equal = TRUE)
ggplot(data = study, aes(x = gender, y = math_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Math Score") +
ggtitle("Math Scores by Gender")
ggplot(data = study, aes(x = gender, y = writing_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Writing Score") +
ggtitle("Writing Scores by Gender")
ggplot(data = study, aes(x = gender, y = reading_score, color = gender)) +
geom_point() +
labs(x = "Gender", y = "Reading Score") +
ggtitle("Reading Scores by Gender")
ggplot(study, aes(x = average_score, y = count(average_score))) + geom_point() +
facet_wrap(~ parental_level_of_education)
ggplot(study, aes(x = average_score, y = count(gender))) + geom_point() +
facet_wrap(~ parental_level_of_education)
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Average Score",y = "Frequency")
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 1000, alpha = 0.5) +
labs(x = "Average Score",y = "Frequency")
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 100, alpha = 0.5) +
labs(x = "Average Score",y = "Frequency")
ggplot(study, aes(x = parental_level_of_education, y = average_score)) +
geom_point() +  # Add points
labs(x = "Parent Education", y = "Average Score") +  # Labels for axes
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.7) +
labs(x = "Average Score", y = "Frequency", fill = "Parent Education") +
facet_wrap(~ parenal_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.7) +
labs(x = "Average Score", y = "Frequency", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 100, position = "identity", alpha = 0.7) +
labs(x = "Average Score", y = "Frequency", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", y = "Frequency", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", y = "Count", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "free") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming your dataset is named 'data' and contains columns 'parent_education' and 'academic_performance'
# 'parent_education' could be a factor or character variable representing the parents' education level
# 'academic_performance' could be a numeric variable representing students' GPA or scores
# Create a histogram filled with a categorical variable
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "fixed") +
theme_minimal()
ggplot(study, aes(x = parental_level_of_education, y = average_score)) +
geom_point() +  # Add points
labs(x = "Parent Education", y = "Academic Performance") +  # Labels for axes
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "fixed") +
theme_minimal()
ggplot(study) + aes(x = average_score, y = count,
colour = parental_level_of_education) +
geom_point() + scale_colour_viridis_d()
ggplot(study) + aes(x = average_score),
ggplot(study) + aes(x = average_score,
colour = parental_level_of_education) +
geom_point() + scale_colour_viridis_d()
count <- study$gender
ggplot(study) + aes(x = average_score,y = count,
colour = parental_level_of_education) +
geom_point() + scale_colour_viridis_d()
ggplot(study, aes(x = parental_level_of_education, y = average_score)) +
geom_point() +  # Add points
labs(x = "Parent Education", y = "Academic Performance") +  # Labels for axes
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "fixed") +
theme_minimal()
count <- count(study$gender)
num_students <- nrow(study)
ggplot(study) + aes(x = average_score,y = num_students,
colour = parental_level_of_education) +
geom_point() + scale_colour_viridis_d()
ggplot(study, aes(x = parental_level_of_education, y = average_score)) +
geom_point() +  # Add points
labs(x = "Parent Education", y = "Academic Performance") +  # Labels for axes
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(study, aes(x = average_score, fill = parental_level_of_education)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Average Score", fill = "Parent Education") +
facet_wrap(~ parental_level_of_education, scales = "fixed") +
theme_minimal()
ggplot(study, aes(x = lunch, y = average_score.x, fill = lunch)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(aes(ymin = average_score.x - average_score.y, ymax = average_score.x + average_score.y),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Lunch", y = "Average Test Score", fill = "Lunch") +
theme_minimal()
ggplot(study, aes(x = lunch, y = average_score.x, fill = lunch)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +,
ggplot(study, aes(x = lunch, y = average_score.x, fill = lunch)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
position = position_dodge(width = 0.9), width = 0.25) +
ggplot(study, aes(x = lunch, y = average_score.x, fill = lunch)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "Lunch", y = "Average Test Score", fill = "Lunch") +
theme_minimal()
ggplot(study, aes(x = lunch, y = average_score, fill = lunch)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
geom_errorbar(stat = "summary", fun.data = mean_se, position = "dodge", width = 0.25) +
labs(x = "Lunch", y = "Average Test Score", fill = "Lunch") +
theme_minimal()
ggplot(study, aes(x = lunch, y = average_score, fill = lunch)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(x = "Lunch", y = "Average Test Score", fill = "Lunch") +
theme_minimal()
ggplot(study, aes(x = lunch, y = average_score, fill = lunch)) +
geom_violin(trim = FALSE, draw_quantiles = c(0.25, 0.5, 0.75)) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(x = "Lunch", y = "Average Test Score", fill = "Lunch") +
theme_minimal() +
theme(legend.position = "none")
ggplot(study, aes(x = lunch, y = average_score, fill = lunch)) +
geom_violin(trim = FALSE, draw_quantiles = c(0.25, 0.5, 0.75)) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(x = "Lunch", y = "Average Test Score", fill = "Lunch") +
theme_minimal() +
theme(legend.position = "none")
t.test(study$average_score ~ study$lunch, var.equal = TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create plot
ggplot() +
geom_boxplot(data = completed_data, aes(x = "Completed", y = average_score), fill = "lightblue") +
geom_boxplot(data = none_data, aes(x = "None", y = average_score), fill = "lightgreen") +
labs(x = "Test Preparation Course", y = "Average Test Score") +
theme_minimal()
library(ggplot2)
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create plot
ggplot() +
geom_boxplot(data = completed_data, aes(x = "Completed", y = average_score), fill = "lightgreen")+
geom_boxplot(data = none_data, aes(x = "None", y = average_score), fill = "red") +
labs(x = "Test Preparation Course", y = "Average Test Score") +
theme_minimal()
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 20, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightblue", "None" = "lightgreen"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 20, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 20, alpha = 0.5, stat = "identity") +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5, stat = "identity") +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
ggplot() + geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 20, alpha = 0.5, stat = "identity") +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5, stat = "identity") +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 20, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 1, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 50, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 50, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 20, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 20, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 30, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 30, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
completed_data <- subset(study, test_preparation_course == "completed")
none_data <- subset(study, test_preparation_course == "none")
# Create histograms
ggplot() +
geom_histogram(data = completed_data, aes(x = average_score, fill = "Completed"), bins = 100, alpha = 0.5) +
geom_histogram(data = none_data, aes(x = average_score, fill = "None"), bins = 100, alpha = 0.5) +
labs(x = "Average Test Score", y = "Frequency", fill = "Test Preparation Course") +
theme_minimal() +
scale_fill_manual(values = c("Completed" = "lightgreen", "None" = "red"))
ggplot(study, aes(x = average_score, fill = test_preparation_course)) + geom_histogram(binwidth = 5000) +
labs(x = "Average Test Score",y = "Frequency") +
facet_wrap(~ test_preparation_course, nrow = 2)
ggplot(study, aes(x = average_score, fill = test_preparation_course)) + geom_histogram(binwidth = 50) +
labs(x = "Average Test Score",y = "Frequency") +
facet_wrap(~ test_preparation_course, nrow = 2)
ggplot(study, aes(x = average_score, fill = test_preparation_course)) + geom_histogram(binwidth = 20) +
labs(x = "Average Test Score",y = "Frequency") +
facet_wrap(~ test_preparation_course, nrow = 2)
ggplot(study, aes(x = average_score, fill = test_preparation_course)) + geom_histogram(binwidth = 10) +
labs(x = "Average Test Score",y = "Frequency") +
facet_wrap(~ test_preparation_course, nrow = 2)
ggplot(study, aes(x = average_score, fill = test_preparation_course)) + geom_histogram(binwidth = 10) +
labs(x = "Average Test Score",y = "Frequency") +
facet_wrap(~ test_preparation_course, nrow = 2)
library(shiny)
shinyAppDir(""D:\Y2S2\NM2207\Project\JacqBernice.github.io\app.R"")
library(shiny)
shinyAppDir("D:/Y2S2/NM2207/Project/JacqBernice.github.io/app.R")
library(shiny)
shinyAppDir("D:/Y2S2/NM2207/Project/JacqBernice.github.io")
load("D:/Y2S2/NM2207/Project/JacqBernice.github.io/.RData")
